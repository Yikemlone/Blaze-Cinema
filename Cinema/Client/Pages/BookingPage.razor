@page "/booking/{ScreeningID:int}"
@using Cinema.Client.Dialogs.BookingDialogs
@using Cinema.Shared.DTO
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Booking Page</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">

    <MudPaper Class="justify-center align-content-center pa-10 ma-2" Elevation="1" Outlined="true">
        <MudGrid Justify="Justify.Center" Spacing="5">
        
            @if (_ticketTypeBookings == null) 
            {
                <MudItem xs="12">
                    <TicketType OnSelectedTikcets="SelectedTickets" Availabletickets="_availableSeats"/>
                </MudItem>
            }
            else
            { 
                <MudItem xs="12">
                    <RoomLayout SeatScreenings="_seats" OnSeatsSelected="SelectedSeats" AmountOfSeatsSelected="_ticketTypeBookings.Count" />
                </MudItem>

                @if (_booking.SeatScreenings.Count > 0) 
                {
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.LocalMovies" Color="Color.Primary" OnClick="ConfirmBooking">Confirm Details</MudButton>
                } else
                {
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.LocalMovies" Color="Color.Primary" Disabled OnClick="ConfirmBooking">Confirm Details</MudButton>
                }
            }
        
        </MudGrid>
    </MudPaper>

</MudContainer>


@code {
    private const string API_URL = "/api";
    private HttpClient? _client;
    private BookingDTO _booking;
    private ScreeningDTO _screening = new ScreeningDTO(); // FIX THIS
    private List<TicketTypeBookingDTO> _ticketTypeBookings;
    private List<SeatScreeningDTO> _seats;
    private int _availableSeats;

    [Parameter] public int ScreeningID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _client = new HttpClient() { BaseAddress = new Uri("https://localhost:7016") };
        _booking = new BookingDTO();
        _booking.Status = "Pending";
        _booking.BookingRef = Guid.NewGuid().ToString();
        _seats = await GetSeatScreenings();
        _availableSeats = _seats.Where(s => s.Booked != true).Select(s => s).Count();
    }

    protected async Task SelectedSeats(List<SeatScreeningDTO> seatScreenings)
    {
        Console.WriteLine(seatScreenings[0].ID);
        _booking.SeatScreenings = seatScreenings;
    }

    protected async Task SelectedTickets(List<TicketTypeBookingDTO> ticketTypes)
    {
        _ticketTypeBookings = ticketTypes;
    }

    public async Task ConfirmBooking() 
    {
        var parameters = new DialogParameters();
        parameters.Add("Booking", _booking);
        parameters.Add("TicketTypeBooking", _ticketTypeBookings);
        parameters.Add("Screening", _screening);
        parameters.Add("Total", 19.99m);

        DialogService.Show<BookingDialog>("Confirm Booking", parameters, new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            DisableBackdropClick = true,
            FullWidth = true
        });
    }

    public async Task<List<SeatScreeningDTO>> GetSeatScreenings() 
    {
        return await _client.GetFromJsonAsync<List<SeatScreeningDTO>>(API_URL + "/movie/seats/" + ScreeningID);
    }

}
