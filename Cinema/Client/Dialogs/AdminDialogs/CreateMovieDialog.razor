@using Cinema.Shared
@using Cinema.Shared.DTO
@using System.Net.Http
@using System.Net.Http.Headers
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <MudPaper>
            <MudForm @ref="_form" @bind-Errors="@_errors">

                <MudStack Row="true">
                    <MudTextField T="string" Label="Name" Variant="Variant.Filled" Required RequiredError="You must enter a Name." @bind-Value="@_movie.Name"></MudTextField>
                    <MudTextField T="int" Label="Duration" Variant="Variant.Filled" Required RequiredError="You must enter a Duration." 
                        @bind-Value="@_movie.Duration" @ref="@_duration" Validation="@(new Func<int, IEnumerable<string>>(DurationLength))"></MudTextField>
                </MudStack>

                <MudStack>
                    <MudDatePicker Label="Date" Variant="Variant.Filled" Required RequiredError="You must enter a Release Date." DateFormat="dd/MM/yyyy" @bind-Date="@_releaseDate" />
                    <MudSelect Label="Age Rating" @bind-Value="_movie.AgeRating" Variant="Variant.Filled" Required RequiredError="You must select an Age Rating.">
                        <MudSelectItem Value="@("G")">G</MudSelectItem>
                        <MudSelectItem Value="@("PG")">PG</MudSelectItem>
                        <MudSelectItem Value="@("12A")">12A</MudSelectItem>
                        <MudSelectItem Value="@("15A")">15A</MudSelectItem>
                        <MudSelectItem Value="@("16")">16</MudSelectItem>
                        <MudSelectItem Value="@("18")">18</MudSelectItem>
                    </MudSelect>
                    <MudTextField T="string" Label="Trailer" Variant="Variant.Filled" Required RequiredError="You must enter a Trailer." @bind-Value="@_movie.Trailer"></MudTextField>
                </MudStack>

                <MudStack Row="true">
                    <MudTextField T="string" Label="Description" Variant="Variant.Filled" Required RequiredError="You must enter a Description." @bind-Value="@_movie.Description" Lines="5"></MudTextField>
                </MudStack>

                <MudStack Row="true" Justify="Justify.Center">
@*
                    <MudFileUpload T="InputFileChangeEventArgs" OnChange="@OnInputFileChange" Required RequiredError="You must upload an Image">
                        <ButtonTemplate>
                            <MudFab HtmlTag="label"
                                    Color="Color.Secondary"
                                    Icon="@Icons.Material.Filled.Image"
                                    Label="Upload picture"
                                    for="@context" />
                        </ButtonTemplate>
                    </MudFileUpload>*@

                    <InputFile OnChange="OnInputFileChange"></InputFile>

                    @if (_file != null)
                    {
                        @_file.Name <code>@_file.Size bytes</code>
                    }
                </MudStack>

            </MudForm>
        </MudPaper>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close" >Save</MudButton>
        <MudButton Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
    </DialogActions>

</MudDialog>

@code {
    private const string API_URL = "api/";
    private MovieDTO? _movie;
    private MudForm? _form;
    private UploadResult _uploadResult;
    private IBrowserFile _file;
    private DateTime? _releaseDate;
    private string[] _errors = { };
    private MudTextField<int>? _duration;
    private long _maxFileSize = long.MaxValue;
    private MultipartFormDataContent _content;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public MudTable<MovieDTO> MudTable { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _movie = new MovieDTO();
        _form = new MudForm();
        _uploadResult = new();
    }

    private IEnumerable<string> DurationLength(int duration)
    {
        if (duration <= 0)
        {
            yield return "Movie must be longer than 0 mins";
        }
    }

    private async Task Close()
    {
        //_form?.Validate();
       // if (_errors.Length != 0) return;

        await AddMovieAsync();

        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        Snackbar.Add("Movie Added", Severity.Success, config =>
        {
            config.VisibleStateDuration = 1000;
            config.Icon = @Icons.Material.Outlined.Check;
        });

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel()
    {
        _movie = null;
        MudDialog.Close(DialogResult.Cancel());
    }

    private async Task AddMovieAsync()
    {
        var movieID = await Http.PostAsJsonAsync<MovieDTO>(API_URL + "admin/create/", _movie);
        //await Http.PostAsync(API_URL + "admin/file/create", _content);

        await MudTable.ReloadServerData();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(1))
        {
            var fileContent = new StreamContent(file.OpenReadStream(long.MaxValue));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: "2");
        }

        var response = await Http.PostAsync("/api/admin/File/create", content);
    }
}
