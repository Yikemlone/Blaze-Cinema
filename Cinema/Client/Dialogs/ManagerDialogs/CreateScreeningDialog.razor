@using Cinema.Shared.DTO
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudPaper>
            <MudForm>

                <MudStack Row=true>
                </MudStack>

                <MudStack>
                    <MudSelect Label="Movie" @bind-Value="_screening.MovieID" Placeholder="Select Movie" Variant="Variant.Filled" Required RequiredError="You must select a Age Rating.">
                        @foreach (var movie in Movies)
                        {
                            <MudSelectItem Value="@movie.ID">@movie.Name</MudSelectItem>
                        }
                    </MudSelect>
                    
@*                    <MudSelect Label="Room" @bind-Value="@_rooms" Placeholder="Select Room" Variant="Variant.Filled" Required RequiredError="You must select a Age Rating.">
                        @foreach (var room in _rooms)
                        {
                            <MudSelectItem Value="@room">Room.ID</MudSelectItem>
                        }
                    </MudSelect>*@

                    <MudTimePicker Label="Time" PickerVariant="PickerVariant.Dialog" AmPm="true" @bind-Time="@_time" />
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Date Format" DateFormat="dd/MM/yyyy" Date="@_screening.DateTime" />

                </MudStack>

            </MudForm>
        </MudPaper>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Save</MudButton>
        <MudButton Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private const string API_URL = "api/manager";
    private HttpClient? _client;
    private ScreeningDTO? _screening;
    private TimeSpan? _time;
    private List<RoomDTO> _rooms;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public MudTable<ScreeningDTO> MudTable { get; set; }
    [Parameter] public List<MovieDTO> Movies { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _client = new HttpClient() { BaseAddress = new Uri("https://localhost:7016") };
        _screening = new ScreeningDTO();
        _time = _screening.DateTime.TimeOfDay;
        _rooms = GetRoomsModel();
    }

    private async void Close()
    {
        await AddMovieModelAsync();

        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        Snackbar.Add("Screening Added", Severity.Success, config =>
        {
            config.VisibleStateDuration = 1000;
            config.Icon = @Icons.Material.Outlined.Check;
        });

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

    private async Task AddMovieModelAsync()
    {
        await _client.PostAsJsonAsync<ScreeningDTO>(API_URL + "/create/", _screening);
        await MudTable.ReloadServerData();
    }

    private async Task<List<RoomDTO>> GetRoomModelAsync()
    {
        return await _client.GetAsJsonAsync<List<RoomDTO>>(API_URL + "/rooms");
   }
}