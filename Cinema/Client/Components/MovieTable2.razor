@using Cinema.Client.Dialogs
@using Cinema.Shared.DTO
@using System.Collections.ObjectModel
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@*
    WILL NEED THESE LATER

    <MudTable Class="mb-4" Loading="true" ServerData="@(new Func<TableState, Task<TableData<ClubResponse>>>(ServerReload))" @ref="clubTable"><ColGroup><MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true"><col style="width: 45%" /><col style="width: 45%" /><col style="width: 10%" /></MudHidden></ColGroup>

    ColumnResizeMode="@ResizeMode.Container"
    HorizontalScrollbar="true"
    Loading=@Loading
    LoadingProgressColor="Color.Secondary"

    <EditTemplate>
        <MudTextField T="string" Label="Description" Variant="Variant.Filled" Value=@context.Item.Description Lines="5"></MudTextField>
    </EditTemplate>
*@

@* Main *@
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudDataGrid 
        T="MovieDTO"
        @ref="mygrid"
        Items="@Movies" 
        Breakpoint="Breakpoint.Sm"
        QuickFilter="new Func<MovieDTO,bool>(FilterFunc1)" 
        Dense="true" 
        Hover="true"
        EditTrigger="@DataGridEditTrigger.Manual"
        RowsPerPage="5"
        Loading=@Loading
        LoadingProgressColor="Color.Secondary"
        SelectedItemChanged="@SelectedItemChanged"
        ReadOnly="false"
        ServerData="@ServerReload"
        Virtualize="true">

        <ToolBarContent>
            <MudTextField @bind-Value="_searchString1" Placeholder="Search" Adornment="Adornment.Start" 
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" Class="mt-0">
            </MudTextField>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Outlined.Add" Color="Color.Secondary" OnClick="OpenCreateDialog" />
            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Secondary" Disabled="@_buttonDisabled" OnClick="OpenUpdateDialog" />
            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Secondary" Disabled="@_buttonDisabled" OnClick="OpenDeleteDialog" />
            <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Color="Color.Secondary" OnClick="OnServerReload" />
        </ToolBarContent>

        <Columns>
            <Column T="MovieDTO" Field="ID" CellStyleFunc=@ColStyleFunc />
            <Column T="MovieDTO" Field="Name" CellStyleFunc=@ColStyleFunc />
            <Column T="MovieDTO" Field="AgeRating" Title="Age Rating" CellStyleFunc=@ColStyleFunc />
            <Column T="MovieDTO" Field="Duration" CellStyleFunc=@ColStyleFunc />
            <Column T="MovieDTO" Field="Trailer" CellStyleFunc=@ColStyleFunc />
            @*<Column T="MovieDTO" Field="Description" Sortable="false" Filterable="false" CellStyleFunc=@ColStyleFunc/>*@
        </Columns>

        <PagerContent>
            <MudDataGridPager T="MovieDTO" />
        </PagerContent>

    </MudDataGrid>
</MudContainer>

@code {
    private string _searchString1 = "";
    private const string API_URL = "api/movie";

    private MovieDTO _movie;
    private bool _buttonDisabled;
    private HttpClient _client;
    private MudDataGrid<MovieDTO> mygrid = new MudDataGrid<MovieDTO>();

    private DialogOptions _options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true};

    [Parameter] public List<MovieDTO> Movies { get; set; } = new List<MovieDTO>();
    [Parameter] public bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _client = new HttpClient() { BaseAddress = new Uri("https://localhost:7016") };
        _movie = null;
        _buttonDisabled = true;
    }

    private bool FilterFunc1(MovieDTO movie) => FilterFunc(movie, _searchString1);
    private bool FilterFunc(MovieDTO movie, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (movie.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true; 
        if (movie.ID.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void OpenCreateDialog()
    {
        DialogService.Show<CreateDialog>("Add New Movie", _options);
    }

    private async void OpenUpdateDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Movie", _movie);

        DialogService.Show<UpdateDialog>("Update Movie Details", parameters, _options);
    }

    private async void OpenDeleteDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Movie", _movie);

        DialogService.Show<DeleteDialog>("Delete Movie", parameters, _options);
    }

    private async void SelectedItemChanged(MovieDTO item)
    {
        _buttonDisabled = false;
        _movie = item;
    }

    private string ColStyleFunc(MovieDTO x)
    {
        if (x.Equals(_movie))
        {
            return "background-color: #ff4081 !important;";
        }

        return "";
    }

    public async Task<List<MovieDTO>> GetMoviesAsync()
    {
        return await _client.GetFromJsonAsync<List<MovieDTO>>(API_URL + "/movies");
    }

    public async void OnServerReload() 
    { 
        _buttonDisabled = true;
        _movie = null;
        await mygrid.ReloadServerData();
    }

    private async Task<GridData<MovieDTO>> ServerReload(GridState<MovieDTO> state)
    {
        return new GridData<MovieDTO>() { Items = await GetMoviesAsync() };
    }

}