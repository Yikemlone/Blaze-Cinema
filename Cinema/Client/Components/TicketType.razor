@using Cinema.Shared.DTO
@inherits ComponentBase

<MudStack>

    <MudText Typo="Typo.h2" Align="Align.Left"><b>Select Tickets</b></MudText>

    <MudStack Row="true" Justify="Justify.Center">
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Secondary" OnClick="AddAdult"/>
        <MudIcon Size="Size.Large" Icon="@Icons.Filled.Person" Style="padding-top: 15px" />
        <span><MudText Typo="Typo.body1" Align="Align.Center">Adult: @_adultTicket</MudText></span>
        <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Secondary" OnClick="SubtractAdult"/>
    </MudStack>

    <MudStack Row="true" Justify="Justify.Center">
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Secondary" OnClick="AddChild"/>
        <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.EscalatorWarning" Style="padding-top: 15px"/>
        <MudText Typo="Typo.body1" Align="Align.End">Child: @_childTicket</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Secondary" OnClick="SubtractChild"/>
    </MudStack>

    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Secondary" OnClick="SelectedTickets">Save Tickets</MudButton>

</MudStack>


@code{
    private List<TicketTypeDTO> _tickets;
    private int _adultTicket;
    private int _childTicket;

    [Parameter] public EventCallback<List<TicketTypeDTO>> OnSelectedTikcets { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _tickets = new List<TicketTypeDTO>();
    }

    public async Task SelectedTickets() 
    {
        for (int i = 0; i < _adultTicket; i++)
        {
            _tickets.Add(new TicketTypeDTO
            {
                Type = "Adult"
            });
        }

        for (int i = 0; i < _childTicket; i++)
        {
            _tickets.Add(new TicketTypeDTO
            {
                Type = "Child"
            });
        }

        await OnSelectedTikcets.InvokeAsync(_tickets);
        _tickets = new List<TicketTypeDTO>();
    }

    public void AddAdult() 
    {
        // Should validate that they can not add more seats in the room
        // should also make sure if they are free seats.
        _adultTicket++;
    }

    public void SubtractAdult() 
    {
        _adultTicket--;
        if (_adultTicket < 0) 
        {
            _adultTicket = 0;
        }
    }

    public void AddChild()
    {
        // Should validate that they can not add more seats in the room
        // should also make sure if they are free seats.
        _childTicket++;
    }

    public void SubtractChild()
    {
        _childTicket--;
        if (_childTicket < 0)
        {
            _childTicket = 0;
        }
    }

}