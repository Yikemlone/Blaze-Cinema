@using Cinema.Shared.DTO
@inherits ComponentBase


<MudText Typo="Typo.h3" Color="Color.Primary" Class="ml-16 mb-7" Align="Align.Left"><b>Select Tickets</b></MudText>

@if (TicketTypes != null)
{
    <MudStack AlignItems="AlignItems.Center">

        <MudStack Row="true" Justify="Justify.Center">
            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddAdult" />
            <MudIcon Size="Size.Large" Icon="@Icons.Filled.Person" />
            <MudText Typo="Typo.body1" Class="mt-2" Align="Align.Center">Adult €@TicketTypes[0].Price: @_adultTicket</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Primary" OnClick="SubtractAdult" />
        </MudStack>

        <MudStack Row="true" Justify="Justify.Center">
            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddChild" />
            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.EscalatorWarning" />
            <MudText Class="mt-2" Typo="Typo.body1" Align="Align.End">Child €@TicketTypes[1].Price: @_childTicket</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Primary" OnClick="SubtractChild" />
        </MudStack>

        <MudStack Row="true" Justify="Justify.Center">
            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.AttachMoney" />
            <MudText Class="mt-2" Typo="Typo.body1" Align="Align.End">Total: €@_subtotal</MudText>
        </MudStack>


        <MudStack Row="true" Justify="Justify.Center">
            @if (!_valid)
            {
                <span style="color: red">@_errorMessage</span>
            }
        </MudStack>

        <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="SelectedTickets" Style="margin: auto">Save Tickets</MudButton>

    </MudStack>
}

@code{
    private List<TicketTypeBookingDTO> _tickTypeBookings;
    private int _adultTicket;
    private int _childTicket;
    private bool _valid = true;
    private string _errorMessage = "";
    private decimal _subtotal;

    [Parameter] public EventCallback<List<TicketTypeBookingDTO>> OnSelectedTikcets { get; set; }
    [Parameter] public List<SeatScreeningDTO> Seats { get; set; }
    [Parameter] public List<TicketTypeDTO> TicketTypes { get; set; }
    [Parameter] public int Availabletickets { get; set; }

    public async Task SelectedTickets() 
    {
        _tickTypeBookings = new List<TicketTypeBookingDTO>();

        for (int i = 0; i < _adultTicket; i++)
        {
            _tickTypeBookings.Add(new TicketTypeBookingDTO
            {
                TicketTypeID = 1
            });
        }

        for (int i = 0; i < _childTicket; i++)
        {
            _tickTypeBookings.Add(new TicketTypeBookingDTO
            {
                TicketTypeID = 2
            });
        }

        if (_tickTypeBookings.Count == 0)
        {
            _valid = false;
            _errorMessage = "Please select a ticket.";
            return;
        }
        else if (_tickTypeBookings.Count > Availabletickets)
        {
            _valid = false;
            _errorMessage = "There are not that many seats available. " + Availabletickets + " seats are left.";
            return;
        }
        else if (_adultTicket == 0 && _childTicket > 0)
        {
            _valid = false;
            _errorMessage = "Children must be with an adult.";
            return;
        }
        else if ((_adultTicket + _childTicket) > 9 || _adultTicket > 9)
        {
            _valid = false;
            _errorMessage = "Can't book more than 9 seats at a time.";
            return;
        }

        await OnSelectedTikcets.InvokeAsync(_tickTypeBookings);
    }

    private void AddAdult() 
    {
        _adultTicket++;
        _subtotal += TicketTypes[0].Price;
    }

    private void SubtractAdult() 
    {
        if (_adultTicket > 0)
        {
            _subtotal -= TicketTypes[0].Price;
        }

        _adultTicket--;

        if (_adultTicket < 0)
        {
            _adultTicket = 0;
        }
    }

    private void AddChild()
    {
        _childTicket++;
        _subtotal += TicketTypes[1].Price;
    }

    private void SubtractChild()
    {
        if (_childTicket > 0)
        {
            _subtotal -= TicketTypes[1].Price;
        }

        _childTicket--;

        if (_childTicket < 0)
        {
            _childTicket = 0;
        }
    }
}