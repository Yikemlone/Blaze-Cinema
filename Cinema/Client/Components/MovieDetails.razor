@using Cinema.Shared.DTO
@using System.Globalization
@inject HttpClient Http
@inherits ComponentBase

<style>
    .video-container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 */
        height: 0;
    }

        .video-container iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
</style>

@if (_movie != null) 
{
    <MudPaper Class="pa-16 ma-3" Elevation="1">
        <MudGrid Spacing="3" Justify="Justify.Center">

            @*Movie Title *@
            <MudItem xs="12" sm="12" md="12">
                <MudText Typo="Typo.h1" Align="Align.Left" Color="Color.Primary"><b>@_movie.Name</b></MudText>
            </MudItem>

            @*Movie Image*@
            <MudItem xs="3" sm="3" md="3">
                <img src="https://localhost:7016/api/file/@(_movie.ID)" width="100%">
            </MudItem>

            @*Movie trailer*@
            <MudItem xs="12" sm="12" md="9" Class="pa-3">
                <div class="video-container">
                    <iframe class="mb-10" width="560" height="315"
                        src="https://www.youtube.com/embed/@_movie.Trailer"
                        frameborder="0"
                        allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
                        allowfullscreen></iframe>
                </div>
            </MudItem>

            @*Movie Duration and release Date*@
            <MudItem xs="9" sm="9" md="12">
                <img src="https://localhost:7016/api/file/IFCO@(_movie.AgeRating)" width="55px">
                <MudText Typo="Typo.h4" Color="Color.Primary"><b>Length</b></MudText>
                <MudText Typo="Typo.body1">@_movie.Duration Minutes</MudText>
                <MudText Typo="Typo.h4" Color="Color.Primary"><b>Release Date</b></MudText>
                <MudText Typo="Typo.body1">@_movie.ReleaseDate.ToLongDateString()</MudText>
            </MudItem>

            @*Movie Description*@
            <MudItem xs="6" sm="8" md="12">
                <MudText Typo="Typo.h3" Color="Color.Primary"><b>Description</b></MudText>
                <MudText Typo="Typo.body1">@_movie.Description</MudText>
            </MudItem>

            @*Movie Screenings*@
            <MudItem xs="9" sm="9" md="12">
                <MudText Typo="Typo.h3" Color="Color.Primary"><b>Screenings</b></MudText>

                @if (_movie.Screenings.Count != 0)
                {
                    @foreach (var screening in _movie.Screenings)
                    {
                        <ScreeningTime Screening=@screening />
                    }
                        
                }
                else
                {
                    <MudText Typo="Typo.h5">No Screenings yet.</MudText>
                }

            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code {

    private const string API_URL = "api/movie";
    private string _link;
    private string[] _daysOfTheWeek;
    private List<ScreeningDTO> _screenings;
    private MovieDTO _movie;

    [Parameter] public int MovieID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _movie = await GetMovieAsync();
        _screenings = _movie.Screenings;

        //foreach (var screening in _screenings) 
        //{
            
        //}

        DateTime startOfWeek = DateTime.Today.AddDays(
            (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek -
            (int)DateTime.Today.DayOfWeek);

        string result = string.Join("," + Environment.NewLine, Enumerable
          .Range(0, 7)
          .Select(i => startOfWeek
             .AddDays(i)
             .ToString("dd MMMM")));

        _daysOfTheWeek = result.Split(",");
    }

    private async Task<MovieDTO> GetMovieAsync()
    {
        return await Http.GetFromJsonAsync<MovieDTO>(API_URL + $"/movies/{MovieID}");
    }
}