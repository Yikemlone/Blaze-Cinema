@using Cinema.Shared.DTO
@using System.Globalization
@inject HttpClient Http
@inherits ComponentBase

@if (Movie != null) 
{
    <MudGrid Spacing="3" Justify="Justify.Center">

        @*Movie Title *@
        <MudItem xs="12" sm="12" md="12">
            <MudText Typo="Typo.h3" Align="Align.Left"><b> @Movie.Name </b></MudText>
        </MudItem>

        @*Movie Image*@
        <MudItem xs="3" sm="3" md="3">
            <MudImage Src="@_imageURL" ObjectFit="ObjectFit.Contain" Fluid=true/>
        </MudItem>

        @*Movie trailer*@
        @*The height is not scalable, need to adjust*@
        <MudItem xs="9" sm="9" md="9">
            <iframe src="https://www.youtube.com/embed/@Movie.Trailer"
                style="width: 100% !important; height: 655px !important;" 
                title="YouTube video player"
                frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                allowfullscreen>
            </iframe>
        </MudItem>

        @*Movie Duration and release Date*@
        <MudItem xs="9" sm="9" md="12">
            <MudImage Src="@_ratingURL" ObjectFit="ObjectFit.Cover" Width="75" />
            <MudText Typo="Typo.h5">Length: @Movie.Duration Minutes</MudText>
            <MudText Typo="Typo.h5">Release Date: @Movie.ReleaseDate.ToLongDateString()</MudText>
        </MudItem>

        @*Movie Description*@
        <MudItem xs="6" sm="8" md="12">
            <MudText Typo="Typo.h3">Description:</MudText>
            <MudText Typo="Typo.body1">@Movie.Description</MudText>
        </MudItem>

        @*Movie Screenings*@
        @if(Movie.Screenings.Count != 0) 
        {
            <MudItem xs="9" sm="9" md="12">

                <MudText Typo="Typo.h3">Screenings</MudText>

                <MudTabs Elevation="2" Color="@Color.Primary" ApplyEffectsToContainer="true" Position="Position.Start">

                    <MudTabPanel Text="@("Monday " + _daysOfTheWeek[0])">
                        @foreach (var screening in Movie.Screenings)
                        {
                            <ScreeningTime Screening=@screening />
                        }
                    </MudTabPanel>

                    <MudTabPanel Text="@("Tuesday " + _daysOfTheWeek[1])">
                    </MudTabPanel>

                    <MudTabPanel Text="@("Wednesday " + _daysOfTheWeek[2])">
                    </MudTabPanel>

                    <MudTabPanel Text="@("Thurday " + _daysOfTheWeek[3])">
                    </MudTabPanel>

                    <MudTabPanel Text="@("Friday " + _daysOfTheWeek[4])">
                    </MudTabPanel>

                    <MudTabPanel Text="@("Saturday " + _daysOfTheWeek[5])">
                    </MudTabPanel>

                    <MudTabPanel Text="@("Sunday " + _daysOfTheWeek[6])">
                    </MudTabPanel>

                </MudTabs>
            </MudItem>
        }
        else
        {
            <MudItem xs="9" sm="9" md="12">
                <MudText Typo="Typo.h3">Screenings</MudText>
                <MudText Typo="Typo.h5">No Screenings yet.</MudText>
            </MudItem>
        }
        
    </MudGrid>
}

@code {

    private const string API_URL = "api/movie";

    public MovieDTO Movie { get; set; }

    private string _imageURL;
    string[] _daysOfTheWeek;
    private string _ratingURL;
    private string _link;

    [Parameter] public int MovieID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Movie = await GetMovieAsync();
        _imageURL = $"images/movies/{Movie.ID}.jpg";
        _ratingURL = $"images/age-rating/IFCO_{Movie.AgeRating}.png";

        DateTime startOfWeek = DateTime.Today.AddDays(
            (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek -
            (int)DateTime.Today.DayOfWeek);

        string result = string.Join("," + Environment.NewLine, Enumerable
          .Range(0, 7)
          .Select(i => startOfWeek
             .AddDays(i)
             .ToString("dd MMMM")));

        _daysOfTheWeek = result.Split(",");


        // Now we must filter the screenings by the days of the week. 
        // Only show screenings for this week.

        // These will all be lists containing their day of booking. We must make sure to also filter by THIS week.
        // mondayScreenings
        // tuesdayScreenings
        // wednesdayScreenings
        // thursdayScreenings
        // fridayScreenings
        // saturdayScreenings
        // sundayScreenings
    }

    public async Task<MovieDTO> GetMovieAsync()
    {
        return await Http.GetFromJsonAsync<MovieDTO>(API_URL + $"/movies/{MovieID}");
    }
}