@using Cinema.Shared.DTO
@using System.Globalization
@inherits ComponentBase

@if (Movie != null) 
{
    <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
        <MudGrid Spacing="3" Justify="Justify.Center">

            <MudItem xs="12" sm="12" md="12">
                <MudText Typo="Typo.h2" Align="Align.Left"><b> @Movie.Name </b></MudText>
            </MudItem>
            
            <MudItem xs="3" sm="3" md="3">
                <MudImage Src="@_imageURL" ObjectFit="ObjectFit.Cover" Width="260"/>
            </MudItem>

            <MudItem xs="9" sm="9" md="1">
                <MudImage Src="@_ratingURL" ObjectFit="ObjectFit.Cover" Width="50" />
                @*<MudText Inline="false" Typo="Typo.subtitle2">@Movie.AgeRating</MudText>*@
                <MudText Inline="true" Typo="Typo.subtitle2">@Movie.Duration Minutes</MudText>
                    <MudText Inline="true" Typo="Typo.subtitle2">Release Date: @Movie.ReleaseDate.ToLongDateString()</MudText>
            </MudItem>

            <MudItem xs="9" sm="9" md="8">
                <MudPaper Class="d-flex align-content-end flex-wrap flex-grow-1 gap-4" Height="380px" Elevation="0" Style="overflow:auto">
                    <MudPaper Height="@(Movie.Description.Length > 500 ? "380px":"150px")" Elevation="0">
                        <MudText Typo="Typo.body1">@Movie.Description</MudText>
                    </MudPaper>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="9" sm="9" md="12">
                <MudTabs Elevation="2" Color="@Color.Primary" ApplyEffectsToContainer="true" Position="Position.Start">
                    
                    <MudTabPanel Text="@("Monday " + _daysOfTheWeek[0])">
                        @foreach (var screening in Movie.Screenings)
                        {
                            <ScreeningTime Screening=@screening />
                        }
                    </MudTabPanel>

                    <MudTabPanel Text="@("Tuesday " + _daysOfTheWeek[1])">
                    </MudTabPanel>

                    <MudTabPanel Text="@("Wednesday " + _daysOfTheWeek[2])">
                    </MudTabPanel>

                    <MudTabPanel Text="@("Thurday " + _daysOfTheWeek[3])">
                    </MudTabPanel>

                    <MudTabPanel Text="@("Friday " + _daysOfTheWeek[4])">
                    </MudTabPanel>

                    <MudTabPanel Text="@("Saturday " + _daysOfTheWeek[5])">
                    </MudTabPanel>

                    <MudTabPanel Text="@("Sunday " + _daysOfTheWeek[6])">
                    </MudTabPanel>  

                </MudTabs>
            </MudItem>

            <MudItem xs="6" sm="8" md="12">
                <iframe src="https://www.youtube.com/embed/@Movie.Trailer"
                    style="width: 100%!important;height: 500px!important;"
                    title="YouTube video player" 
                    frameborder="0" 
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
                    allowfullscreen>
                </iframe>
            </MudItem>

        </MudGrid>
    </MudContainer>
}

@code {

    private const string API_URL = "api/movie";

    private HttpClient _client;
    public MovieDTO Movie { get; set; }

    private string _imageURL;
    string[] _daysOfTheWeek;
    private string _ratingURL;
    private string _link;

    [Parameter] public int MovieID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _client = new HttpClient() { BaseAddress = new Uri("https://localhost:7016") };
        Movie = await GetMovieAsync();
        _imageURL = $"images/{Movie.ID}.jpg";
        _ratingURL = $"images/IFCO_{Movie.AgeRating}.png";

        DateTime startOfWeek = DateTime.Today.AddDays(
            (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek -
            (int)DateTime.Today.DayOfWeek);

        string result = string.Join("," + Environment.NewLine, Enumerable
          .Range(0, 7)
          .Select(i => startOfWeek
             .AddDays(i)
             .ToString("dd MMMM")));

        _daysOfTheWeek = result.Split(",");


        // Now we must filter the screenings by the days of the week. 
        // Only show screenings for this week.

        // These will all be lists containing their day of booking. We must make sure to also filter by THIS week.
        // mondayScreenings
        // tuesdayScreenings
        // wednesdayScreenings
        // thursdayScreenings
        // fridayScreenings
        // saturdayScreenings
        // sundayScreenings
    }

    public async Task<MovieDTO> GetMovieAsync()
    {
        return await _client.GetFromJsonAsync<MovieDTO>(API_URL + $"/movies/{MovieID}");
    }
}