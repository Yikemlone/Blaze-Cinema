@using Cinema.Shared.DTO
@using System.Globalization
@inject HttpClient Http
@inherits ComponentBase

<style>
    .video-container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 */
        height: 0;
    }

        .video-container iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
</style>

@if (Movie != null) 
{
    <MudPaper Class="pa-7 ma-3" Elevation="1">
        <MudGrid Spacing="3" Justify="Justify.Center">

            @*Movie Title *@
            <MudItem xs="12" sm="12" md="12">
                <MudText Typo="Typo.h3" Align="Align.Left"><b> @Movie.Name </b></MudText>
            </MudItem>

            @*Movie Image*@
            <MudItem xs="3" sm="3" md="3">
                <img src="https://localhost:7016/api/file/@(Movie.ID)" width="100%">
            </MudItem>

            @*Movie trailer*@
            @*The height is not scalable, need to adjust*@
            <MudItem xs="12" sm="12" md="9" xl="12" Class="pa-3">
                <div class="video-container">
                    <iframe style="padding-bottom: 109px" width="560" height="315"
                        src="https://www.youtube.com/embed/@Movie.Trailer"
                        frameborder="0"
                        allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
                        allowfullscreen></iframe>
                </div>
            </MudItem>

            @*Movie Duration and release Date*@
            <MudItem xs="9" sm="9" md="12">
                <img src="https://localhost:7016/api/file/IFCO@(Movie.AgeRating)" width="55px">
                <MudText Typo="Typo.h5">Length: @Movie.Duration Minutes</MudText>
                <MudText Typo="Typo.h5">Release Date: @Movie.ReleaseDate.ToLongDateString()</MudText>
            </MudItem>

            @*Movie Description*@
            <MudItem xs="6" sm="8" md="12">
                <MudText Typo="Typo.h3">Description:</MudText>
                <MudText Typo="Typo.body1">@Movie.Description</MudText>
            </MudItem>

            @*Movie Screenings*@
            @if (Movie.Screenings.Count != 0)
            {
                <MudItem xs="9" sm="9" md="12">

                    <MudText Typo="Typo.h3">Screenings</MudText>

                    <MudTabs Elevation="2" Color="@Color.Primary" ApplyEffectsToContainer="true" Position="Position.Start">

                        <MudTabPanel Text="@("Monday " + _daysOfTheWeek[0])">
                            @foreach (var screening in Movie.Screenings)
                            {
                                <ScreeningTime Screening=@screening />
                            }
                        </MudTabPanel>

                        <MudTabPanel Text="@("Tuesday " + _daysOfTheWeek[1])">
                        </MudTabPanel>

                        <MudTabPanel Text="@("Wednesday " + _daysOfTheWeek[2])">
                        </MudTabPanel>

                        <MudTabPanel Text="@("Thurday " + _daysOfTheWeek[3])">
                        </MudTabPanel>

                        <MudTabPanel Text="@("Friday " + _daysOfTheWeek[4])">
                        </MudTabPanel>

                        <MudTabPanel Text="@("Saturday " + _daysOfTheWeek[5])">
                        </MudTabPanel>

                        <MudTabPanel Text="@("Sunday " + _daysOfTheWeek[6])">
                        </MudTabPanel>

                    </MudTabs>
                </MudItem>
            }
            else
            {
                <MudItem xs="9" sm="9" md="12">
                    <MudText Typo="Typo.h3">Screenings</MudText>
                    <MudText Typo="Typo.h5">No Screenings yet.</MudText>
                </MudItem>
            }

        </MudGrid>
    </MudPaper>
}

@code {

    private const string API_URL = "api/movie";
    private string _link;
    private string[] _daysOfTheWeek;

    public MovieDTO Movie { get; set; }
    [Parameter] public int MovieID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Movie = await GetMovieAsync();

        DateTime startOfWeek = DateTime.Today.AddDays(
            (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek -
            (int)DateTime.Today.DayOfWeek);

        string result = string.Join("," + Environment.NewLine, Enumerable
          .Range(0, 7)
          .Select(i => startOfWeek
             .AddDays(i)
             .ToString("dd MMMM")));

        _daysOfTheWeek = result.Split(",");


        // Now we must filter the screenings by the days of the week. 
        // Only show screenings for this week.

        // These will all be lists containing their day of booking. We must make sure to also filter by THIS week.
        // mondayScreenings
        // tuesdayScreenings
        // wednesdayScreenings
        // thursdayScreenings
        // fridayScreenings
        // saturdayScreenings
        // sundayScreenings
    }

    private async Task<MovieDTO> GetMovieAsync()
    {
        return await Http.GetFromJsonAsync<MovieDTO>(API_URL + $"/movies/{MovieID}");
    }
}