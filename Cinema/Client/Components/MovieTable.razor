@using Cinema.Client.Dialogs.AdminDialogs
@using Cinema.Shared.DTO
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<style>
    .selected {
        background-color: #ff4081 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }

</style>

<MudGrid>
    <MudTable 
        Items="@_movies" 
        Hover="true" 
        Breakpoint="Breakpoint.Sm" 
        @ref="_mudTable" 
        RowClassFunc="@SelectedRowClassFunc" 
        OnRowClick="RowClickEvent" 
        T="MovieDTO" 
        Loading=@_loading
        LoadingProgressColor="Color.Secondary"
        Dense="true"
        Bordered="true"
        Filter="new Func<MovieDTO,bool>(FilterFunc1)" 
        @bind-SelectedItem="_selected"
        FixedHeader="true"
        Style="width: 100%;"
        HorizontalScrollbar="true"
        RowsPerPage="5"
        ServerData="ServerReload"
        TotalItems=@(_movies != null ? _movies.Count : 0)>
            
        <ToolBarContent>
            <MudText Typo="Typo.h6">Movie List</MudText>
            <MudSpacer />

            <MudTextField @bind-Value="_searchString1" Placeholder="Search" Adornment="Adornment.Start" 
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>

            <MudSpacer />

            <MudTooltip Text="Add" Placement="Placement.Top" Color="Color.Secondary">
                <MudIconButton Icon="@Icons.Material.Outlined.Add" Color="Color.Secondary" OnClick="OpenCreateDialog" />
            </MudTooltip>
            <MudTooltip Text="Edit" Placement="Placement.Top" Color="Color.Secondary">
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Secondary" Disabled=@_buttonDisabled OnClick="OpenUpdateDialog"/>
            </MudTooltip>
            <MudTooltip Text="Delete" Placement="Placement.Top" Color="Color.Secondary">
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Secondary" Disabled=@_buttonDisabled OnClick="OpenDeleteDialog" />
            </MudTooltip>

        </ToolBarContent>

        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>
                <div style="white-space: nowrap;">
                    Age Rating
                </div>
            </MudTh>
            <MudTh>Duration</MudTh>
            <MudTh>Trailer</MudTh>
            <MudTh>Description</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Name" Style="width: 200px">
                <div style="white-space: nowrap;">
                    @context.Name
                </div>
            </MudTd>
            <MudTd DataLabel="AgeRating">@context.AgeRating</MudTd>
            <MudTd DataLabel="Duration">@context.Duration</MudTd>
            <MudTd DataLabel="Trailer">@context.Trailer</MudTd>
            <MudTd DataLabel="Description">
                <div style="white-space: nowrap;">
                    @context.Description
                </div>
            </MudTd>
        </RowTemplate>

        <PagerContent >
            <MudTablePager PageSizeOptions="@_pageSizeOptions" HorizontalAlignment="HorizontalAlignment.Center"/>
        </PagerContent>

    </MudTable>
</MudGrid>

@code {
    private const string API_URL = "api/movie";

    private string _searchString1;
    private bool _buttonDisabled;
    private bool _loading { get; set; }

    private HttpClient _client;
    private MovieDTO? _selected;
    private MudTable<MovieDTO>? _mudTable;
    private DialogOptions _dialogOptions;
    private List<MovieDTO>? _movies;
    private int[] _pageSizeOptions;


    // Set up
    public MovieTable()
    {
        _client = new HttpClient() { BaseAddress = new Uri("https://localhost:7016") };
        _buttonDisabled = true;
        _searchString1 = "";
        _pageSizeOptions = new int[] { 5, 10, 20 };
        _dialogOptions = new DialogOptions 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = true, 
            DisableBackdropClick = true
        };
    }

    protected override async Task OnInitializedAsync()
    {
        _movies = await GetMoviesAsync();
    }


    // Table Event Functions
    private void RowClickEvent(TableRowClickEventArgs<MovieDTO> tableRowClickEventArgs)
    {
        _selected = tableRowClickEventArgs.Item;

        if (_selected != null)
        {
            _buttonDisabled = false;
        }
        else
        {
            _buttonDisabled = true;
        }
    }

    private string SelectedRowClassFunc(MovieDTO element, int rowNumber)
    {
        if (_selected != null && _selected.Equals(element))
        {
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private bool FilterFunc1(MovieDTO movie) => FilterFunc(movie, _searchString1);

    private bool FilterFunc(MovieDTO movie, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (movie.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true; 
        if (movie.ID.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    // Dialogs
    private void OpenCreateDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("MudTable", _mudTable);

        DialogService.Show<CreateMovieDialog>("Create New Movie", parameters, _dialogOptions);
    }

    private void OpenUpdateDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Movie", _selected);
        parameters.Add("MudTable", _mudTable);

        DialogService.Show<UpdateMovieDialog>("Update Movie Details", parameters, _dialogOptions);
    }

    private void OpenDeleteDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Movie", _selected);
        parameters.Add("MudTable", _mudTable);

        DialogService.Show<DeleteMovieDialog>("Delete Movie", parameters, new DialogOptions() 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Medium, 
            DisableBackdropClick = true 
        });
    }


    // Populting Table
    protected async Task<TableData<MovieDTO>> ServerReload(TableState movies)
    {
        var updatedMovies = await GetMoviesAsync();
        return new TableData<MovieDTO>() { TotalItems = updatedMovies.Count , Items = updatedMovies};
    }

    public async Task<List<MovieDTO>> GetMoviesAsync()
    {
        return await _client.GetFromJsonAsync<List<MovieDTO>>(API_URL + "/movies");
    }

}