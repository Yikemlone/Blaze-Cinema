@using Cinema.Client.Dialogs
@using Cinema.Shared.DTO
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<style>
    .selected {
        background-color: #ff4081 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">

    <MudGrid>
        <MudTable Items="@Movies" 
            Hover="true" 
            Breakpoint="Breakpoint.Sm" 
            @ref="mudTable" 
            RowClassFunc="@SelectedRowClassFunc" 
            OnRowClick="RowClickEvent" 
            T="MovieDTO" 
            Loading=@Loading
            LoadingProgressColor="Color.Secondary"
            Dense=true
            Filter="new Func<MovieDTO,bool>(FilterFunc1)" 
            @bind-SelectedItem="selected"
            FixedHeader=true
            RowsPerPage="5">
            
            <ToolBarContent>

                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" 
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                </MudTextField>

                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Outlined.Add" Color="Color.Secondary" OnClick="OpenCreateDialog" />
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Secondary" Disabled=@_buttonDisabled OnClick="OpenUpdateDialog"/>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Secondary" Disabled=@_buttonDisabled OnClick="OpenDeleteDialog" />

            </ToolBarContent>

            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Age Rating</MudTh>
                <MudTh>Duration</MudTh>
                <MudTh>Trailer</MudTh>
                <MudTh>Description</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Name" Style="width: 200px">@context.Name</MudTd>
                <MudTd DataLabel="AgeRating">@context.AgeRating</MudTd>
                <MudTd DataLabel="Duration">@context.Duration</MudTd>
                <MudTd DataLabel="Trailer">@context.Trailer</MudTd>
                <MudTd DataLabel="Description" Style="width: 550px">@context.Description</MudTd>
            </RowTemplate>

            <PagerContent >
                <MudTablePager PageSizeOptions="new int[] { 5, 10, 20, int.MaxValue }" HorizontalAlignment="HorizontalAlignment.Center"/>
            </PagerContent>

        </MudTable>
    </MudGrid>

</MudContainer>

@code {
    private string searchString1 = "";
    private MovieDTO selected = null;
    private int selectedRowNumber = -1;
    private MudTable<MovieDTO>? mudTable;
    private List<string> clickedEvents = new();
    private bool FilterFunc1(MovieDTO movie) => FilterFunc(movie, searchString1);
    private bool _buttonDisabled = true;

    private DialogOptions _options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large };

    [Parameter] public List<MovieDTO> Movies { get; set; } = new List<MovieDTO>();
    [Parameter] public bool Loading { get; set; }

    private void RowClickEvent(TableRowClickEventArgs<MovieDTO> tableRowClickEventArgs)
    {
        clickedEvents.Add("Row has been clicked");
        StateHasChanged();
    }

    private string SelectedRowClassFunc(MovieDTO element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            _buttonDisabled = true;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            _buttonDisabled = false;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private bool FilterFunc(MovieDTO movie, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (movie.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true; 
        if (movie.ID.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void OpenCreateDialog()
    {
        DialogService.Show<CreateDialog>("Add New Movie", _options);
    }

    private void OpenUpdateDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Movie", Movies[selectedRowNumber]);

        DialogService.Show<UpdateDialog>("Update Movie Details", parameters, _options);
    }

    private void OpenDeleteDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("MovieID", Movies[selectedRowNumber]);

        DialogService.Show<DeleteDialog>("Delete Movie", parameters, _options);
    }

}