@using Cinema.Client.Dialogs.AdminDialogs
@using Cinema.Shared.DTO
@inherits ComponentBase
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<style>
    .selected {
        background-color: #ff4081 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }

</style>

@if (_movies != null) 
{
    <MudTable 
    Items="@_movies" 
    T="MovieDTO" 
    Breakpoint="Breakpoint.Sm" 
    @ref="_mudTable" 
    @bind-SelectedItem="_selected"
    RowClassFunc="@SelectedRowClassFunc" 
    OnRowClick="RowClickEvent" 
    Loading="@(_movies == null ? true : false)"
    LoadingProgressColor="Color.Primary"
    Hover="true"
    Dense="true"
    FixedHeader="true"
    ServerData="ServerReload">
        
        <ToolBarContent>
            <MudText Typo="Typo.h6">Edit Movie Listings</MudText>
            <MudSpacer />

            <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" ValueChanged="@(s=>OnSearch(s))" 
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>

            <MudSpacer />

            <MudTooltip Text="Add" Placement="Placement.Top" Color="Color.Primary">
                <MudIconButton Icon="@Icons.Material.Outlined.Add" Color="Color.Primary" OnClick="OpenCreateDialog" />
            </MudTooltip>
            <MudTooltip Text="Edit" Placement="Placement.Top" Color="Color.Primary">
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" Disabled=@_buttonDisabled OnClick="OpenUpdateDialog"/>
            </MudTooltip>
            <MudTooltip Text="Delete" Placement="Placement.Top" Color="Color.Primary">
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Primary" Disabled=@_buttonDisabled OnClick="OpenDeleteDialog" />
            </MudTooltip>

        </ToolBarContent>

        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortLabel="name" T="MovieDTO">
                    Name
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="release_date" T="MovieDTO">
                    <div style="white-space: nowrap;">
                        Release Date
                    </div>
                    </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="age_rating" T="MovieDTO">
                    <div style="white-space: nowrap;">
                        Age Rating
                    </div>
                    </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="duration" T="MovieDTO">
                    Duration
                </MudTableSortLabel>
            </MudTh>

            <MudTh>Trailer</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Image</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Name" Style="width: 200px">
                <div style="white-space: nowrap;">
                    @context.Name
                </div>
            </MudTd>
            <MudTd DataLabel="ReleaseDate">@context.ReleaseDate.ToLongDateString()</MudTd>
            <MudTd DataLabel="AgeRating">@context.AgeRating</MudTd>
            <MudTd DataLabel="Duration">@context.Duration</MudTd>
            <MudTd DataLabel="Trailer">@context.Trailer</MudTd>
            <MudTd DataLabel="Description">
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" @onclick="@(() => OpenDescriptonDialog(@context.Description))">View Description</MudButton>
            </MudTd>
            <MudTd DataLabel="Description">
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" @onclick="@(() => OpenImageDialog(@context.ID.ToString()))">View Image</MudButton>
            </MudTd>
        </RowTemplate>

        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>

        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>

        <PagerContent>
            <MudTablePager PageSizeOptions="@_pageSizeOptions" HorizontalAlignment="HorizontalAlignment.Center"/>
        </PagerContent>

    </MudTable>
} 
else
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
}


@code {
    private const string API_URL = "api/movie";

    private string _searchString;
    private bool _buttonDisabled;
    private int _totalItems;
    private int[] _pageSizeOptions;

    private MovieDTO? _selected;
    private MudTable<MovieDTO>? _mudTable;
    private DialogOptions _dialogOptions;
    private IEnumerable<MovieDTO>? _movies;

    protected override async Task OnInitializedAsync()
    {
        _buttonDisabled = true;
        _searchString = "";
        _pageSizeOptions = new int[] { 5, 10, 20 };
        _dialogOptions = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            DisableBackdropClick = true
        };

        _movies = await GetMoviesAsync();
    }

    // Table Event Functions
    private void RowClickEvent(TableRowClickEventArgs<MovieDTO> tableRowClickEventArgs)
    {
        _selected = tableRowClickEventArgs.Item;

        if (_selected != null)
        {
            _buttonDisabled = false;
        }
        else
        {
            _buttonDisabled = true;
        }
    }

    private string SelectedRowClassFunc(MovieDTO element, int rowNumber)
    {
        if (_selected != null && _selected.Equals(element))
        {
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _mudTable.ReloadServerData();
    }


    // Dialogs
    private void OpenCreateDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("MudTable", _mudTable);

        DialogService.Show<CreateMovieDialog>("Create New Movie", parameters, _dialogOptions);
    }

    private void OpenUpdateDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Movie", _selected);
        parameters.Add("MudTable", _mudTable);

        DialogService.Show<UpdateMovieDialog>("Update Movie Details", parameters, _dialogOptions);
    }

    private void OpenDeleteDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Movie", _selected);
        parameters.Add("MudTable", _mudTable);

        DialogService.Show<DeleteMovieDialog>("Delete Movie", parameters, new DialogOptions() 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Medium, 
            DisableBackdropClick = true 
        });
    }

    private void OpenDescriptonDialog(string description)
    {
        var parameters = new DialogParameters();
        parameters.Add("Description", description);

        DialogService.Show<DescriptionDialog>("Movie Description", parameters, _dialogOptions);
    }

    private void OpenImageDialog(string imageID) 
    {
        var parameters = new DialogParameters();
        parameters.Add("MovieID", imageID);

        DialogService.Show<MovieImageDialog>("Movie Image", parameters, new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            DisableBackdropClick = true
        });
    }

    // Server Reload Data
    protected async Task<TableData<MovieDTO>> ServerReload(TableState state)
    {
        IEnumerable<MovieDTO> updatedMovies = await GetMoviesAsync();

        updatedMovies = updatedMovies.Where(movie =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;
            if (movie.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (movie.ID.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();

        _totalItems = updatedMovies.Count();

        switch (state.SortLabel)
        {
            case "name":
                updatedMovies = updatedMovies.OrderByDirection(state.SortDirection, m => m.Name);
                break;
            case "age_rating":
                updatedMovies = updatedMovies.OrderByDirection(state.SortDirection, m => m.AgeRating);
                break;
            case "duration":
                updatedMovies = updatedMovies.OrderByDirection(state.SortDirection, m => m.Duration);
                break;
        }

        _movies = updatedMovies.Skip(state.Page * state.PageSize).Take(state.PageSize);
        _selected = null;
        _buttonDisabled = true;

        return new TableData<MovieDTO>() { TotalItems = _totalItems, Items = _movies };
    }

    private async Task<List<MovieDTO>> GetMoviesAsync()
    {
        return await Http.GetFromJsonAsync<List<MovieDTO>>(API_URL + "/movies");
    }

}