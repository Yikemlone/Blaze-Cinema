@using Cinema.Client.Dialogs.ManagerDialogs
@using Cinema.Shared.DTO
@inherits ComponentBase
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<style>
    .selected {
        background-color: #ff4081 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }

</style>

@if(_movies != null && _screenings != null) 
{
    <MudTable 
    Items="@_screenings" 
    T="ScreeningDTO" 
    Breakpoint="Breakpoint.Sm" 
    @ref="_mudTable" 
    @bind-SelectedItem="_selected"
    RowClassFunc="@SelectedRowClassFunc" 
    OnRowClick="RowClickEvent" 
    Hover="true" 
    Dense="true"
    FixedHeader="true"
    GroupBy="@_groupDefinition"
    GroupHeaderStyle="background-color: #424242"
    GroupFooterClass="mb-4"
    ServerData="ServerReload">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Edit Movie Screenings</MudText>
            <MudSpacer />

            <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" ValueChanged="@(s=>OnSearch(s))" 
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>

            <MudSpacer />

            <MudTooltip Text="Add" Placement="Placement.Top" Color="Color.Primary">
                <MudIconButton Icon="@Icons.Material.Outlined.Add" Color="Color.Primary" OnClick="OpenCreateDialog" />
            </MudTooltip>
            <MudTooltip Text="Edit" Placement="Placement.Top" Color="Color.Primary">
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" Disabled=@_buttonDisabled OnClick="OpenUpdateDialog"/>
            </MudTooltip>
            <MudTooltip Text="Delete" Placement="Placement.Top" Color="Color.Primary">
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Primary" Disabled=@_buttonDisabled OnClick="OpenDeleteDialog" />
            </MudTooltip>

        </ToolBarContent>

        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortLabel="room_ID" T="ScreeningDTO">
                    Room
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="date_time" T="ScreeningDTO">
                    Date Time
                    </MudTableSortLabel>
            </MudTh>
        </HeaderContent>

        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="5">
                @foreach (var movie in _movies)
                {
                    if (movie.ID == Int32.Parse(context.Key.ToString()))
                    {
                        @movie.Name                    
                    }
                }
            </MudTh>
        </GroupHeaderTemplate>

        <RowTemplate>
            <MudTd DataLabel="RoomID">@context.RoomID</MudTd>
            <MudTd DataLabel="DateTime">@context.DateTime</MudTd>
        </RowTemplate>

        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>

        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>

    </MudTable>
} 
else 
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large"/>
}

@code {
    private const string API_URL = "api/movie";

    private string _searchString;
    private bool _buttonDisabled;
    private int _totalItems;
    private int[] _pageSizeOptions;

    private ScreeningDTO? _selected;
    private MudTable<ScreeningDTO>? _mudTable;
    private DialogOptions _dialogOptions;
    private IEnumerable<ScreeningDTO>? _screenings;
    private IEnumerable<MovieDTO>? _movies;

    private TableGroupDefinition<ScreeningDTO> _groupDefinition = new()
    {
        GroupName = "Movie",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.MovieID
    };

    protected override async Task OnInitializedAsync()
    {
        _buttonDisabled = true;
        _searchString = "";
        _dialogOptions = new DialogOptions
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            DisableBackdropClick = true
        };

        _movies = await GetMoviesAsync();
        _screenings = await GetScreeningsAsync();
    }


    // Table Event Functions
    private void RowClickEvent(TableRowClickEventArgs<ScreeningDTO> tableRowClickEventArgs)
    {
        _selected = tableRowClickEventArgs.Item;

        if (_selected != null)
        {
            _buttonDisabled = false;
        }
        else
        {
            _buttonDisabled = true;
        }
    }

    private string SelectedRowClassFunc(ScreeningDTO element, int rowNumber)
    {
        if (_selected != null && _selected.Equals(element))
        {
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _mudTable.ReloadServerData();
    }


    // Dialogs
    private void OpenCreateDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("MudTable", _mudTable);
        parameters.Add("Movies", _movies.ToList());
        parameters.Add("Screenings", _screenings.ToList());

        DialogService.Show<CreateScreeningDialog>("Create New Screening", parameters, _dialogOptions);
    }

    private void OpenUpdateDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Screening", _selected);
        parameters.Add("MudTable", _mudTable);
        parameters.Add("Movies", _movies.ToList());
        parameters.Add("Screenings", _screenings.ToList());

        DialogService.Show<UpdateScreeningDialog>("Update Screening Details", parameters, _dialogOptions);
    }

    private void OpenDeleteDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Screening", _selected);
        parameters.Add("MudTable", _mudTable);

        DialogService.Show<DeleteScreeningDialog>("Delete Screening", parameters, new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            DisableBackdropClick = true
        });
    }


    // Server Reload Data
    protected async Task<TableData<ScreeningDTO>> ServerReload(TableState state)
    {
        IEnumerable<ScreeningDTO> updatedScreenings = await GetScreeningsAsync();

        updatedScreenings = updatedScreenings.Where(screening =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;
            if (screening.RoomID.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();

        _totalItems = updatedScreenings.Count();

        switch (state.SortLabel)
        {
            case "room_ID":
                updatedScreenings = updatedScreenings.OrderByDirection(state.SortDirection, m => m.RoomID);
                break;
            case "date_time":
                updatedScreenings = updatedScreenings.OrderByDirection(state.SortDirection, m => m.DateTime);
                break;
        }

        _screenings = updatedScreenings;
        _selected = null;
        _buttonDisabled = true;

        return new TableData<ScreeningDTO>() { TotalItems = _totalItems, Items = _screenings };
    }

    private async Task<List<MovieDTO>> GetMoviesAsync()
    {
        return await Http.GetFromJsonAsync<List<MovieDTO>>(API_URL + "/movies");
    }

    private async Task<List<ScreeningDTO>> GetScreeningsAsync()
    {
        return await Http.GetFromJsonAsync<List<ScreeningDTO>>(API_URL + "/screenings");
    }
}